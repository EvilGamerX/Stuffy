@page "/stuffy/diagram"
@using System;
@using System.Collections.Generic;
@using System.Text;
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models;
@using Stuffy.Website.Client.Models;
@using Stuffy.Website.Shared.Models;
@inject HttpClient Http

<h3>Diagram</h3>


@if (_diagram == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="height: 1000px; width: 1000px;">
        <CascadingValue Value="_diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>
}

@code {
    private Diagram _diagram { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        var options = new DiagramOptions
            {
                DeleteKey = "Delete", // What key deletes the selected nodes/links
                DefaultNodeComponent = null, // Default component for nodes
                AllowMultiSelection = true, // Whether to allow multi selection using CTRL
                Links = new DiagramLinkOptions
                {
                    // Options related to links
                },
                Zoom = new DiagramZoomOptions
                {
                    Minimum = 0.5, // Minimum zoom value
                    Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
                                     // Other
                }
            };
        _diagram = new Diagram(options);
        _diagram.RegisterModelComponent<NodeNodeModel, MyNode>();


        var nodes = await Http.GetFromJsonAsync<NodeViewModel[]>("api/node");
        var connections = await Http.GetFromJsonAsync<ConnectionViewModel[]>("api/connection");

        var nodeDict = new Dictionary<Guid, NodeNodeModel>();

        foreach(var stuffy in nodes)
        {
            var nodeModel = new NodeNodeModel((Random.Shared.NextDouble() * 100.0) + 50, (Random.Shared.NextDouble() * 200.0) + 50, stuffy);
            _diagram.Nodes.Add(nodeModel);
            nodeDict.TryAdd(nodeModel.Data.Id, nodeModel);
        }

        foreach(var connection in connections)
        {
            var connectionModel = new LinkModel(nodeDict[connection.ParentId], nodeDict[connection.OtherNodeId]);
            _diagram.Links.Add(connectionModel);
        }
    }

}
